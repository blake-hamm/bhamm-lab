- name: Set facts for bootstrap host list
  ansible.builtin.set_fact:
    bootstrap_host_list: "{{ bootstrap_host_list | default([]) + [{'name': item, 'disk_id': hostvars[item].bootstrap_disk_id}] }}"
  with_items: "{{ groups['debian'] }}"
- name: Check for vault ssh credentials
  community.hashi_vault.vault_read:
    url: https://vault.bhamm-lab.com
    auth_method: approle
    role_id: "{{ lookup('env', 'VAULT_ROLE_ID') }}"
    secret_id: "{{ lookup('env', 'VAULT_SECRET_ID') }}"
    path: secret/data/core/ansible/{{ item.name }}
  with_items: "{{ bootstrap_host_list }}"
  register: host_in_vault
  ignore_errors: true
- name: Get username and password from vault
  community.hashi_vault.vault_read:
    url: https://vault.bhamm-lab.com
    auth_method: approle
    role_id: "{{ lookup('env', 'VAULT_ROLE_ID') }}"
    secret_id: "{{ lookup('env', 'VAULT_SECRET_ID') }}"
    path: secret/data/core/ansible/preseed
  register: vault_preseed_secrets
  when: host_in_vault.failed
- name: Attempt to SSH into the remote host assuming vanila ssh config
  ansible.builtin.command: |
    sshpass -p "{{ vault_preseed_secrets.data.data.data.user_password }}" \
      ssh -o StrictHostKeyChecking=no \
      {{ vault_preseed_secrets.data.data.data.username }}@{{ hostvars[item.item.name].ansible_host }} \
      -p 22 "echo Connection successful"
  register: ssh_result
  ignore_errors: true
  with_items: "{{ host_in_vault.results }}"
  when: "'seem to exist' in item.msg"
  changed_when: false
- name: If no ssh, create preseed assets
  ansible.builtin.include_tasks: preseed.yml
  vars:
    hostname: "{{ item.item.item.name }}"
    disk_id: "{{ item.item.item.disk_id }}"
    username: "{{ vault_preseed_secrets.data.data.data.username }}"
    user_password: "{{ vault_preseed_secrets.data.data.data.user_password }}"
  with_items: "{{ ssh_result.results }}"
  when: item.failed
- name: Retry SSH connection for 20 minutes and on success, remove preseed files
  block:
    - name: Attempt to SSH into the remote host assuming vanilla ssh config (retry)
      ansible.builtin.command: |
        sshpass -p "{{ vault_preseed_secrets.data.data.data.user_password }}" \
          ssh -o StrictHostKeyChecking=no \
          {{ vault_preseed_secrets.data.data.data.username }}@{{ hostvars[item.item.item.name].ansible_host }} \
          -p 22 "echo Connection successful"
      register: ssh_retry_result
      until: ssh_retry_result.rc == 0
      retries: 40
      delay: 30
      with_items: "{{ ssh_result.results }}"
      when: item.failed
      changed_when: false
      # always:
      # - name: Remove preseed assets
- name: Debug
  ansible.builtin.debug:
    msg: "{{ item.failed }}"
  with_items: "{{ ssh_result.results }}"
  when: item.failed

# - name: Delegate ssh hardening role to host with missing vault credentials
#   ansible.builtin.command: "echo Connection successful"
#   delegate_to: "{{ hostvars[item.item.name].ansible_hos }}"
#   vars:
#     ansible_user: "{{ hostvars.localhost.vault_preseed_secrets.data.data.data.username }}"
#     ansible_ssh_pass: "{{ hostvars.localhost.vault_preseed_secrets.data.data.data.user_password }}"
#     ansible_port: "22"
#     custom_ssh_options: "-o StrictHostKeyChecking=no"
#   register: ssh_result
#   with_items: "{{ host_in_vault.results }}"
#   when: "'seem to exist' in item.msg"
#   changed_when: false
