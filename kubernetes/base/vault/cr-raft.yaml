apiVersion: "vault.banzaicloud.com/v1alpha1"
kind: "Vault"
metadata:
  name: "vault"
  labels:
    app.kubernetes.io/name: vault
    vault_cr: vault
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
spec:
  size: 3
  image: hashicorp/vault:1.14.8
  annotations:
    common/annotation: "true"
  vaultAnnotations:
    type/instance: "vault"
  vaultConfigurerAnnotations:
    type/instance: "vaultconfigurer"
  vaultLabels:
    bhamm-lab.com/log-format: "json"
  vaultConfigurerLabels:
    bhamm-lab.com/log-format: "string"
  # Support for affinity Rules
  # affinity:
  #   nodeAffinity:
  #     requiredDuringSchedulingIgnoredDuringExecution:
  #       nodeSelectorTerms:
  #       - matchExpressions:
  #         - key : "node-role.kubernetes.io/your_role"
  #           operator: In
  #           values: ["true"]

  # Support for pod nodeSelector rules to control which nodes can be chosen to run
  # the given pods
  # nodeSelector:
  #   "node-role.kubernetes.io/your_role": "true"

  # Support for node tolerations that work together with node taints to control
  # the pods that can like on a node
  # tolerations:
  # - effect: NoSchedule
  #   key: node-role.kubernetes.io/your_role
  #   operator: Equal
  #   value: "true"
  serviceAccount: vault
  serviceType: ClusterIP
  # Use local disk to store Vault raft data, see config section.
  volumeClaimTemplates:
    - metadata:
        name: vault-raft
      spec:
        # https://kubernetes.io/docs/concepts/storage/persistent-volumes/#class-1
        # storageClassName: ""
        accessModes:
          - ReadWriteOnce
        volumeMode: Filesystem
        resources:
          requests:
            storage: 1Gi
  volumeMounts:
    - name: vault-raft
      mountPath: /vault/file
  veleroEnabled: true
  caNamespaces: ["*"]
  unsealConfig:
    options:
      preFlightChecks: true
      storeRootToken: true
      secretShares: 5
      secretThreshold: 3
    google:
      kmsKeyRing: "vault"
      kmsCryptoKey: "vault-unsealer"
      kmsLocation: "us-central1"
      kmsProject: "deep-contact-445917-i9"
      storageBucket: "bhamm-lab-vault"
  credentialsConfig:
    env: GOOGLE_APPLICATION_CREDENTIALS
    path: /etc/gcp/service-account.json
    secretName: gcp-sa
  config:
    storage:
      raft:
        path: "/vault/file"
    listener:
      tcp:
        address: "0.0.0.0:8200"
        tls_cert_file: /vault/tls/server.crt
        tls_key_file: /vault/tls/server.key
        telemetry:
          unauthenticated_metrics_access: true
    seal:
      gcpckms:
        project: "deep-contact-445917-i9"
        region: "us-central1"
        key_ring: "vault"
        crypto_key: "vault-unsealer"
    telemetry:
      prometheus_retention_time: "24h"
      disable_hostname: true
    api_addr: https://vault.default:8200
    cluster_addr: "https://${.Env.POD_NAME}:8201"
    ui: true
  # envsConfig:
  #   - name: OIDC_VAULT_CLIENT_SECRET
  #     valueFrom:
  #       secretKeyRef:
  #         name: vault-external-secrets
  #         key: OIDC_VAULT_CLIENT_SECRET
  statsdDisabled: false
  serviceMonitorEnabled: true
  serviceRegistrationEnabled: true
  resources:
    vault:
      limits:
        memory: "512Mi"
        cpu: "200m"
      requests:
        memory: "256Mi"
        cpu: "100m"
  # See: https://banzaicloud.com/docs/bank-vaults/cli-tool/#example-external-vault-configuration
  # The repository also contains a lot examples in the test/deploy and operator/deploy directories.
  externalConfig:
    purgeUnmanagedConfig:
      enabled: true
      exclude:
        secrets: true
    policies:
      - name: allow_secrets
        rules: path "secret/*" { capabilities = ["create", "read", "update", "delete", "list"] }
      - name: read_secrets
        rules: path "secret/*" { capabilities = ["read", "list"] }
      - name: admin
        rules: path "*" { capabilities = ["create", "read", "update", "delete", "list", "sudo"] }
      - name: prometheus-operator
        rules: path "sys/metrics" { capabilities = ["list", "read"] }
      - name: ansible
        rules: path "secret/data/core/ansible/*" { capabilities = ["create", "read", "update", "delete", "list"] }
      - name: create_token
        rules: path "auth/token/create" { capabilities = ["create", "update"] }
    auth:
      - type: kubernetes
        roles:
          - name: default
            bound_service_account_names: ["*"]
            bound_service_account_namespaces: ["*"]
            policies: read_secrets
            ttl: 1h
          - name: prometheus
            bound_service_account_names: monitor-kube-prometheus-st-prometheus
            bound_service_account_namespaces: default
            policies: prometheus-operator
            ttl: 4h
      # - type: oidc
      #   config:
      #     oidc_discovery_url: https://auth.bhamm-lab.com
      #     oidc_client_id: vault
      #     oidc_client_secret: "${env `OIDC_VAULT_CLIENT_SECRET`}"
      #     default_role: default
      #     allowed_redirect_uris: ["https://vault.bhamm-lab.com/oidc/callback", "https://vault.bhamm-lab.com/ui/vault/auth/oidc/oidc/callback"]
      #   roles:
      #     - name: default
      #       role_type: oidc
      #       allowed_redirect_uris: ["https://vault.bhamm-lab.com/oidc/callback", "https://vault.bhamm-lab.com/ui/vault/auth/oidc/oidc/callback", "http://localhost:8250/oidc/callback"]
      #       bound_audiences: vault
      #       user_claim: sub
      #       policies: admin
      #       ttl: 1h
      - type: approle
        roles:
          - name: default
            policies: allow_secrets
            secret_id_ttl: 1440h
            secret_id_num_uses: 200
            token_num_uses: 10
            token_ttl: 20m
            token_max_ttl: 30m
          - name: ansible
            policies: read_secrets, ansible
            secret_id_ttl: 1440h
            secret_id_num_uses: 1000
            token_num_uses: 0
            token_ttl: 20m
            token_max_ttl: 30m
    secrets:
      - path: secret
        type: kv
        description: General secrets.
        options:
          version: 2
          # Allows writing some secrets to Vault (useful for development purposes).
          # See https://www.vaultproject.io/docs/secrets/kv/index.html for more information.
          # startupSecrets:
          #   - type: kv
          #     path: secret/data/accounts/aws
          #     data:
          #       data:
          #         AWS_ACCESS_KEY_ID: secretId
          #         AWS_SECRET_ACCESS_KEY: s3cr3t
          #   - type: kv
          #     path: secret/data/dockerrepo
          #     data:
          #       data:
          #         DOCKER_REPO_USER: dockerrepouser
          #         DOCKER_REPO_PASSWORD: dockerrepopassword
          #   - type: kv
          #     path: secret/data/mysql
          #     data:
          #       data:
          #         MYSQL_ROOT_PASSWORD: s3cr3t
  # secretInitsConfig:
  #   - name: VAULT_LOG_LEVEL
  #     value: debug
