apiVersion: argoproj.io/v1alpha1
kind: CronWorkflow
metadata:
  name: backup
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "500"
spec:
  schedule: "* * 0 0 0"
  timezone: "America/Denver"
  startingDeadlineSeconds: 0
  concurrencyPolicy: "Replace"
  successfulJobsHistoryLimit: 4
  failedJobsHistoryLimit: 4
  suspend: false
  workflowSpec:
    entrypoint: backup-workflow
    templates:
      - name: backup-workflow
        dag:
          tasks:
            - name: trigger-k8up-pvc-backup
              template: trigger-k8up-pvc-backup
            - name: wait-for-k8up-pvc-backup
              template: wait-for-k8up-pvc-backup
              dependencies: [trigger-k8up-pvc-backup]
      - name: trigger-k8up-pvc-backup
        container:
          action: create
          manifest: |
            apiVersion: k8up.io/v1
            kind: Backup
            metadata:
              name: pvc-backups
            spec:
              failedJobsHistoryLimit: 2
              successfulJobsHistoryLimit: 2
              backend:
                repoPasswordSecretRef:
                  name: backup-external-secret
                  key: repo-password
                s3:
                  endpoint: https://minio-api.bhamm-lab.com:443
                  bucket: backups
                  accessKeyIDSecretRef:
                    name: backup-external-secret
                    key: user
                  secretAccessKeySecretRef:
                    name: backup-external-secret
                    key: password
      - name: wait-for-k8up-pvc-backup
        container:
          image: bitnami/kubectl:latest
          command: ["/bin/sh", "-c"]
          args:
            - |
              while true; do
                status=$(kubectl get backup pvc-backups -n default -o jsonpath='{.status.phase}')
                if [ "$status" == "Succeeded" ]; then
                  echo "Backup completed successfully."
                  exit 0
                elif [ "$status" == "Failed" ]; then
                  echo "Backup failed."
                  exit 1
                else
                  echo "Waiting for backup to complete..."
                  echo "Current status: $status"
                  sleep 10
                fi
              done
