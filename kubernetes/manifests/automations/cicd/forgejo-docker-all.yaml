apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: forgejo-docker-changes
  namespace: argo
  annotations:
    argocd.argoproj.io/sync-wave: "7"
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  template:
    serviceAccountName: argo-workflow
  dependencies:
    - name: forgejo-push-event
      eventSourceName: forgejo
      eventName: push
      filters:
        script: |-
          -- Check all commits for docker/ path changes
          for _, commit in ipairs(event.body.commits) do
              -- Check added files
              for _, path in ipairs(commit.added) do
                  if string.sub(path, 1, 7) == "docker/" then
                      return true
                  end
              end

              -- Check modified files
              for _, path in ipairs(commit.modified) do
                  if string.sub(path, 1, 7) == "docker/" then
                      return true
                  end
              end

              -- Check removed files
              for _, path in ipairs(commit.removed) do
                  if string.sub(path, 1, 7) == "docker/" then
                      return true
                  end
              end
          end
          return false
  triggers:
    - template:
        name: docker-change-trigger
        argoWorkflow:
          operation: submit
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: forgejo-docker-changes-
              spec:
                serviceAccountName: argo-workflow
                entrypoint: main
                onExit: exit-handler
                arguments:
                  parameters:
                    - name: commits
                    - name: repoUrl
                    - name: branch
                    - name: git-sha
                templates:
                  - name: main
                    inputs:
                      parameters:
                        - name: commits
                        - name: repoUrl
                        - name: branch
                        - name: git-sha
                    dag:
                      tasks:
                        - name: forgejo-status
                          templateRef:
                            name: forgejo-status
                            template: forgejo-status
                          arguments:
                            parameters:
                              - name: git-sha
                                value: "{{inputs.parameters.git-sha}}"
                              - name: state
                                value: "pending"
                        - name: extract-dockerfiles
                          template: extract-dockerfiles
                          arguments:
                            parameters:
                              - name: commits
                                value: "{{inputs.parameters.commits}}"
                        - name: clone-repo
                          templateRef:
                            name: clone-repo
                            template: clone-repo
                          arguments:
                            parameters:
                              - name: url
                                value: "{{inputs.parameters.repoUrl}}"
                              - name: branch
                                value: "{{inputs.parameters.branch}}"
                        - name: prepare-config
                          template: prepare-podman-config
                        - name: build-and-push
                          template: build-and-push-podman
                          depends: "extract-dockerfiles && clone-repo && prepare-config"
                          arguments:
                            parameters:
                              - name: dockerfile
                                value: "{{item}}"
                            artifacts:
                              - name: repository
                                from: "{{tasks.clone-repo.outputs.artifacts.repo}}"
                              - name: podman-config
                                from: "{{tasks.prepare-config.outputs.artifacts.podman-creds}}"
                          withParam: "{{tasks.extract-dockerfiles.outputs.result}}"
                  - name: extract-dockerfiles
                    inputs:
                      parameters:
                        - name: commits
                      artifacts:
                        - name: input-json
                          path: /tmp/input.json
                          raw:
                            data: "{{inputs.parameters.commits}}"
                    script:
                      image: python:alpine
                      command: [python]
                      source: |
                        import json
                        import os

                        with open('/tmp/input.json', 'r') as f:
                            commits = json.load(f)

                        docker_files = []
                        for commit in commits:
                            for path in commit.get('added', []) + commit.get('modified', []):
                                parts = path.split('/')
                                if len(parts) >= 2 and parts[0] == 'docker':
                                    dir_name = parts[1]
                                    dockerfile_path = os.path.join('docker', dir_name, 'Dockerfile')
                                    if dockerfile_path not in docker_files:
                                        docker_files.append(dockerfile_path)

                        print(json.dumps(docker_files))
                  - name: prepare-podman-config
                    outputs:
                      artifacts:
                        - name: podman-creds
                          path: /home/podman/.config
                          archive:
                            none: {}
                    script:
                      image: alpine:latest
                      command: [sh]
                      env:
                        - name: REGISTRY
                          value: "harbor.bhamm-lab.com"
                        - name: ROBOT_USERNAME
                          valueFrom:
                            secretKeyRef:
                              name: argo-external-secret
                              key: robot-username
                        - name: ROBOT_TOKEN
                          valueFrom:
                            secretKeyRef:
                              name: argo-external-secret
                              key: robot-token
                      source: |
                        #!/bin/sh
                        # Create directories for podman config
                        mkdir -p /home/podman/.config/containers

                        # Create registries.conf for Harbor
                        cat > /home/podman/.config/containers/registries.conf << EOF
                        [registries.search]
                        registries = ['${REGISTRY}']

                        [registries.insecure]
                        registries = []

                        [registries.block]
                        registries = []
                        EOF

                        # Create auth.json for Harbor authentication
                        cat > /home/podman/.config/containers/auth.json << EOF
                        {
                          "auths": {
                            "${REGISTRY}": {
                              "auth": "$(echo -n "${ROBOT_USERNAME}:${ROBOT_TOKEN}" | base64)"
                            }
                          }
                        }
                        EOF
                  - name: build-and-push-podman
                    inputs:
                      parameters:
                        - name: dockerfile
                      artifacts:
                        - name: repository
                          path: /workspace
                        - name: podman-config
                          path: /home/podman/.config
                    container:
                      image: quay.io/podman/stable:v4.9.0
                      securityContext:
                        runAsUser: 1000
                        runAsGroup: 1000
                        runAsNonRoot: true
                        allowPrivilegeEscalation: false
                      env:
                        - name: CONTAINERS_REGISTRIES_CONF
                          value: /home/podman/.config/containers/registries.conf
                        - name: REGISTRY_AUTH_FILE
                          value: /home/podman/.config/containers/auth.json
                        - name: STORAGE_DRIVER
                          value: vfs
                        - name: STORAGE_OPTS
                          value: vfs.imagestore=/tmp/podman-storage
                      command: [sh, -c]
                      args:
                        - |
                          set -ex

                          # Set up storage directory
                          mkdir -p /tmp/podman-storage

                          DOCKERFILE_PATH="{{inputs.parameters.dockerfile}}"
                          full_path="/workspace/$DOCKERFILE_PATH"
                          context_dir=$(dirname "$full_path")
                          image_name=$(basename "$context_dir")
                          IMAGE_TAG="harbor.bhamm-lab.com/library/$image_name:latest"

                          echo "Building image: $IMAGE_TAG"
                          echo "Context: $context_dir"
                          echo "Dockerfile: $full_path"

                          # Build the image
                          podman build \
                            --storage-driver vfs \
                            --root /tmp/podman-storage \
                            -f "$full_path" \
                            -t "$IMAGE_TAG" \
                            "$context_dir"

                          # Push the image
                          podman push \
                            --storage-driver vfs \
                            --root /tmp/podman-storage \
                            "$IMAGE_TAG"
                  - name: exit-handler
                    steps:
                      - - name: final-status
                          templateRef:
                            name: forgejo-status
                            template: forgejo-status
                          arguments:
                            parameters:
                              - name: git-sha
                                value: "{{workflow.parameters.git-sha}}"
                              - name: state
                                value: "{{=workflow.status == 'Succeeded' ? 'success' : 'failure'}}"
          parameters:
            - src:
                dependencyName: forgejo-push-event
                dataKey: body.commits
              dest: spec.arguments.parameters.0.value
              transformation:
                template: "{{ .Input | toJson }}"
            - src:
                dependencyName: forgejo-push-event
                dataKey: body.repository.clone_url
              dest: spec.arguments.parameters.1.value
            - src:
                dependencyName: forgejo-push-event
                dataKey: body.ref
                transformation:
                  template: '{{ .Input | replace "refs/heads/" "" }}'
              dest: spec.arguments.parameters.2.value
            - src:
                dependencyName: forgejo-push-event
                dataKey: body.head_commit.id
              dest: spec.arguments.parameters.3.value
