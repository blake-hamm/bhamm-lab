apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: alloy
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "21"
spec:
  destination:
    namespace: monitor
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: alloy
    repoURL: https://grafana.github.io/helm-charts
    targetRevision: 0.12.5
    helm:
      valuesObject:
        alloy:
          configMap:
            create: true
            content: |
              loki.write "loki" {
                endpoint {
                  url = "http://loki-distributed-distributor:3100/loki/api/v1/push"
                }
              }

              // discovery.kubernetes allows you to find scrape targets from Kubernetes resources.
              // It watches cluster state and ensures targets are continually synced with what is currently running in your cluster.
              discovery.kubernetes "pod" {
                role = "pod"
              }

              // discovery.relabel rewrites the label set of the input targets by applying one or more relabeling rules.
              // If no rules are defined, then the input targets are exported as-is.
              discovery.relabel "pod_logs" {
                targets = discovery.kubernetes.pod.targets

                rule {
                  source_labels = ["__meta_kubernetes_namespace"]
                  target_label = "namespace"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_name"]
                  target_label = "pod"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_container_name"]
                  target_label = "container"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
                  target_label = "app"
                }
                rule {
                  source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
                  target_label = "job"
                  separator = "/"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_container_id"]
                  target_label = "container_runtime"
                  regex = "^(\\S+):\\/\\/.+$"
                  replacement = "$1"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
                  target_label = "service_name"
                }
              }

              // loki.source.kubernetes tails logs from Kubernetes containers using the Kubernetes API.
              loki.source.kubernetes "pod_logs" {
                targets    = discovery.relabel.pod_logs.output
                forward_to = [loki.process.pod_logs.receiver]
              }

              // loki.process receives log entries from other Loki components, applies one or more processing stages,
              // and forwards the results to the list of receivers in the component's arguments.
              loki.process "pod_logs" {
                stage.labels {
                  values = {
                    hostname = sys.env("HOSTNAME"),
                  }
                }

                forward_to = [loki.write.loki.receiver]
              }

              // loki.source.kubernetes_events tails events from the Kubernetes API and converts them
              // into log lines to forward to other Loki components.
              loki.source.kubernetes_events "cluster_events" {
                job_name   = "integrations/kubernetes/eventhandler"
                log_format = "logfmt"
                forward_to = [
                  loki.process.cluster_events.receiver,
                ]
              }

              // loki.process receives log entries from other loki components, applies one or more processing stages,
              // and forwards the results to the list of receivers in the component's arguments.
              loki.process "cluster_events" {
                forward_to = [loki.write.loki.receiver]

                stage.labels {
                  values = {
                    kubernetes_cluster_events = "job",
                    hostname = sys.env("HOSTNAME"),
                  }
                }
              }

              // Discover all .log files and specific non-.log files under /var/log
              local.file_match "host_log_files" {
                path_targets = [
                  { __path__ = "/var/log/syslog" },
                  { __path__ = "/var/log/messages" },
                ]
              }

              // Tail discovered files
              loki.source.file "host_logs" {
                targets    = local.file_match.host_log_files.targets
                forward_to = [loki.process.host_logs.receiver]
                tail_from_end = true
              }

              loki.process "host_logs" {
                stage.static_labels {
                  values = {
                    job      = "host-logs",
                  }
                }
                stage.labels {
                  values = {
                    hostname = sys.env("HOSTNAME"),
                  }
                }
                forward_to = [loki.write.loki.receiver]
              }
          mounts:
            varlog: true
        controller:
          tolerations:
            - key: "intel.com/gpu"
              operator: "Exists"
              effect: "NoSchedule"
            - key: "node-role.kubernetes.io/control-plane"
              operator: "Exists"
              effect: "NoSchedule"
            - key: "amd.com/gpu"
              operator: "Exists"
              effect: "NoSchedule"
        serviceMonitor:
          enabled: true
          additionalLabels:
            release: monitor
  syncPolicy:
    syncOptions:
      - ApplyOutOfSyncOnly=true
    automated:
      prune: true
      selfHeal: true
