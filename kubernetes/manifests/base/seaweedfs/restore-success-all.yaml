apiVersion: batch/v1
kind: Job
metadata:
  name: restore-checker
  namespace: seaweedfs
  annotations:
    argocd.argoproj.io/sync-wave: "3"
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: HookFailed
spec:
  backoffLimit: 0
  template:
    spec:
      serviceAccountName: restore-checker
      containers:
        - name: kubectl
          image: bitnami/kubectl:1.29
          command: ["/bin/bash", "-c"]
          args:
            - |
              set -euo pipefail

              # Configuration
              max_retries=12
              initial_delay=10
              max_delay=60
              delay=$initial_delay
              retry_count=0

              # Main checking function
              function check_restores() {
                local all_succeeded=true
                local any_failed=false

                restores=$(kubectl get restore.k8up.io -o name -n seaweedfs 2>/dev/null || true)

                if [ -z "$restores" ]; then
                  echo "No restore resources found in seaweedfs namespace"
                  return 1  # Indicates need to retry
                fi

                while IFS= read -r restore; do
                  echo "Checking $restore"

                  # Get status fields
                  status=$(kubectl get $restore -n seaweedfs -o jsonpath='{.status.conditions[?(@.type=="Completed")].status}' 2>/dev/null || true)
                  reason=$(kubectl get $restore -n seaweedfs -o jsonpath='{.status.conditions[?(@.type=="Completed")].reason}' 2>/dev/null || true)
                  finished=$(kubectl get $restore -n seaweedfs -o jsonpath='{.status.finished}' 2>/dev/null || true)

                  # Evaluate status
                  if [ "$status" = "True" ] && [ "$reason" = "Succeeded" ]; then
                    echo "✅ $restore: Successfully completed"
                  elif [ "$reason" = "Failed" ]; then
                    echo "❌ $restore: FAILED! (Status: $status, Reason: $reason)"
                    any_failed=true
                  elif [ "$finished" != "true" ]; then
                    echo "⏳ $restore: Still in progress (Status: $status, Reason: $reason)"
                    all_succeeded=false
                  else
                    echo "⚠️  $restore: Unexpected state (Status: $status, Reason: $reason, Finished: $finished)"
                    all_succeeded=false
                  fi
                done <<< "$restores"

                # Handle failure cases
                if [ "$any_failed" = true ]; then
                  echo "Critical failure detected in one or more restores"
                  return 2  # Hard failure - no retry
                fi

                if [ "$all_succeeded" = false ]; then
                  return 1  # Need to retry
                fi

                return 0  # All succeeded
              }

              # Main retry loop
              while [ $retry_count -le $max_retries ]; do
                echo -e "\n=== Restore check attempt $((retry_count+1))/$((max_retries+1)) ==="

                if check_restores; then
                  echo -e "\n✅ ALL RESTORES SUCCEEDED!"
                  exit 0
                else
                  rc=$?
                  if [ $rc -eq 2 ]; then  # Hard failure
                    echo -e "\n❌ CRITICAL FAILURE DETECTED - ABORTING"
                    exit 1
                  fi

                  # Calculate next delay with exponential backoff
                  echo -e "\n⏳ Some restores not ready. Retrying in ${delay}s..."
                  sleep $delay

                  # Increase delay with ceiling
                  delay=$((delay + 5))
                  if [ $delay -gt $max_delay ]; then
                    delay=$max_delay
                  fi

                  retry_count=$((retry_count+1))
                fi
              done

              # Final check after max retries
              echo -e "\n⚠️  Maximum retries exceeded. Performing final check..."
              if check_restores; then
                echo -e "\n✅ ALL RESTORES SUCCEEDED ON FINAL CHECK!"
                exit 0
              else
                echo -e "\n❌ ERROR: Some restores failed to complete successfully"
                exit 1
              fi
      restartPolicy: Never
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: restore-checker
  namespace: seaweedfs
  annotations:
    argocd.argoproj.io/sync-wave: "0"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: restore-reader
  namespace: seaweedfs
  annotations:
    argocd.argoproj.io/sync-wave: "0"
rules:
  - apiGroups: ["k8up.io"]
    resources: ["restores"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["pods/log"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: restore-checker-binding
  namespace: seaweedfs
  annotations:
    argocd.argoproj.io/sync-wave: "1"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: restore-reader
subjects:
  - kind: ServiceAccount
    name: restore-checker
    namespace: seaweedfs
