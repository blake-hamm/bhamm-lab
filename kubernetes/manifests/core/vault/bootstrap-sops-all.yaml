apiVersion: v1
kind: ServiceAccount
metadata:
  name: sops-vault-sync-sa
  namespace: argo-events
  annotations:
    argocd.argoproj.io/sync-wave: "-6"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: sops-vault-sync-role
  namespace: argo-events
  annotations:
    argocd.argoproj.io/sync-wave: "-6"
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["pods", "pods/exec"]
    verbs: ["get", "list", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: sops-vault-sync-binding
  namespace: argo-events
  annotations:
    argocd.argoproj.io/sync-wave: "-5"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: sops-vault-sync-role
subjects:
  - kind: ServiceAccount
    name: sops-vault-sync-sa
    namespace: argo-events
---
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  name: sops-vault-sync-workflow
  namespace: argo-events
  annotations:
    argocd.argoproj.io/sync-wave: "-4"
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  entrypoint: sops-vault-sync-workflow
  serviceAccountName: sops-vault-sync-sa
  templates:
    - name: sops-vault-sync-workflow
      retryStrategy:
        limit: "10"
        retryPolicy: "Always"
      container:
        image: debian:bookworm-slim
        command: ["/bin/bash", "-c"]
        args:
          - |
            set -e

            # Install pre-reqs
            apt-get update && apt-get install -y \
                wget \
                gpg \
                lsb-release

            # Get vault keys
            wget -O - https://apt.releases.hashicorp.com/gpg | gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/hashicorp.list

            # Update and install dependencies
            apt-get update && apt-get install -y \
                git \
                curl \
                jq \
                vault \
                ca-certificates \
                gnupg \
                ssh-client

            # Install sops
            curl -LO https://github.com/getsops/sops/releases/download/v3.9.4/sops-v3.9.4.linux.amd64
            mv sops-v3.9.4.linux.amd64 /usr/local/bin/sops
            chmod +x /usr/local/bin/sops

            # Clone repository
            echo "Cloning repository..."
            git clone -b main https://github.com/blake-hamm/bhamm-lab.git /workspace/repo

            # Decrypt secrets
            echo "Decrypting secrets..."
            export GOOGLE_APPLICATION_CREDENTIALS=/secrets/gcp/service-account.json
            sops --decrypt /workspace/repo/secrets.enc.json > /workspace/secrets.decrypted.json

            # Vault authentication
            echo "Authenticating with Vault..."
            K8S_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
            LOGIN_RESPONSE=$(curl -k -s --request POST \
                --data "{\"jwt\": \"$K8S_TOKEN\", \"role\": \"sops\"}" \
                "$VAULT_ADDR/v1/auth/kubernetes/login")

            export VAULT_TOKEN=$(echo $LOGIN_RESPONSE | jq -r '.auth.client_token')
            [ -z "$VAULT_TOKEN" ] && { echo "Vault login failed"; exit 1; }

            # Update Vault secrets
            echo "Updating Vault..."
            jq -c '.vault_secrets | to_entries[]' /workspace/secrets.decrypted.json | while read -r path_entry; do
                vault_path=$(echo "$path_entry" | jq -r '.key')
                echo "$path_entry" | jq -c '.value | to_entries[]' | while read -r app_entry; do
                    app=$(echo "$app_entry" | jq -r '.key')
                    echo "$app_entry" | jq -r '.value' > /workspace/tmp.json

                    echo "Writing secrets for $vault_path/$app"
                    vault kv put -mount=secret "$vault_path/$app" @/workspace/tmp.json || exit 1
                    rm /workspace/tmp.json
                done
            done

            # Clean up
            rm /workspace/secrets.decrypted.json
            echo "All operations completed successfully!"
        env:
          - name: VAULT_ADDR
            value: "https://vault.vault:8200"
          - name: VAULT_SKIP_VERIFY
            value: "true"
        volumeMounts:
          - name: gcp-credentials
            mountPath: /secrets/gcp
            readOnly: true
  volumes:
    - name: gcp-credentials
      projected:
        sources:
          - secret:
              name: gcp-sops-sa
              items:
                - key: service-account.json
                  path: service-account.json
